"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[8189],{7802:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"email-basics/account","title":"Account","description":"In RustMail, an account is a one-to-one mapping to an email address (e.g., user@gmail.com) from any mail service you want to sync. This could be a Gmail, Outlook, Yahoo, or any other email account supporting IMAP and SMTP.","source":"@site/docs/email-basics/account.md","sourceDirName":"email-basics","slug":"/email-basics/account","permalink":"/rustmail-docs/docs/email-basics/account","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/email-basics/account.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Fundamentals","permalink":"/rustmail-docs/docs/category/fundamentals"},"next":{"title":"Mailbox","permalink":"/rustmail-docs/docs/email-basics/mailbox"}}');var t=s(4848),a=s(8453);const i={sidebar_position:1},c="Account",r={},l=[];function d(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"account",children:"Account"})}),"\n",(0,t.jsxs)(n.p,{children:["In RustMail, an ",(0,t.jsx)(n.strong,{children:"account"})," is a one-to-one mapping to an email address (e.g., ",(0,t.jsx)(n.code,{children:"user@gmail.com"}),") from any mail service you want to sync. This could be a Gmail, Outlook, Yahoo, or any other email account supporting IMAP and SMTP."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Definition"}),": A unique account created by binding an email address (e.g., ",(0,t.jsx)(n.code,{children:"user@outlook.com"}),") to it."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ID"}),": The system assigns a ",(0,t.jsx)(n.strong,{children:"randomly generated string"})," (e.g., ",(0,t.jsx)(n.code,{children:'"e9xmyoaGx9TakjHz"'}),") to this account for API use."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Enables IMAP and SMTP email operations via the ID, like fetching or sending emails."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Resources"}),": Links to additional features, such as email templates and event hooks."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"An account ties your email address to RustMail, simplifying mail management across services."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var o=s(6540);const t={},a=o.createContext(t);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);